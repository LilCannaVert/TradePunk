<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Binance Trade Punk</title>
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Rajdhani:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@100;200;300;400;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
    <div id="app">
        <div class="relative p-4">
          <header class="flex relative h-14 gap-4 items-center justify-between px-2 text-sm lg:text-xl">
            <div class="flex items-center">
              <div :class="[status === 0 ? 'red' : 'green']" class="status mx-3"> </div>
              <div class="clock">{{ digitalClock }}</div>
            </div>
            
            <Transition>
              <div v-if="!tickers[ticker]" class="flex flex-grow justify-center absolute w-full">
                <span class="animate-pulse">
                  {{statusMsg}}
                </span>
              </div>
            </Transition>
           
            <Transition>
              <div v-if="tickers[ticker]" class="flex gap-2 flex-grow items-center justify-between delay-200">
                <div class="w-1/2">
                  <div class="flex gap-2">
                    <small>{{tickers[ticker]['pair']}}</small>
                    <span :class="tickers[ticker]['style']">
                      <span class="mr-1">{{tickers[ticker]['arrow']}}</span>
                      <span>{{tickers[ticker]['percent'].toFixed(2)}}%</span>
                    </span>
                  </div>
                  <div>
                    <span :class="tickers[ticker]['style']">{{parseNumber(tickers[ticker]['close'], tickers[ticker]['asset'])}}</span>
                  </div>
                </div>
                <div class="w-1/2">
                  <small class="block">24H Highest</small>
                  <span>{{parseNumber(tickers[ticker]['high'], tickers[ticker]['asset'])}}</span>
                </div>
                <div class="w-1/2">
                  <small class="block">24H Lowest</small>
                  <span>{{parseNumber(tickers[ticker]['low'], tickers[ticker]['asset'])}}</span>
                </div>
                <div class="w-1/2 hidden">
                  <small class="block">24H Volume</small>
                  <span>{{parseNumber(tickers[ticker]['tokenVolume'], tickers[ticker]['token'])}} {{tickers[ticker]['token']}}</span>
                </div>
                <div class="w-1/2 hidden">
                  <small class="block">24H Value</small>
                  <span>{{parseNumber(tickers[ticker]['assetVolume'], tickers[ticker]['asset'])}} {{tickers[ticker]['asset']}}</span>
                </div>
              </div>
            </Transition>

            <div class="flex gap-2">
              <button @click="toggleReferralModal" class="bg-[--color-primary-blue] text-white px-4 py-2 rounded flex items-center gap-2">
                <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"/><circle cx="9" cy="7" r="4"/><path d="M22 21v-2a4 4 0 0 0-3-3.87"/><path d="M16 3.13a4 4 0 0 1 0 7.75"/></svg>
                Referrals
              </button>
            </div>
          </header>
            <div class="delimiter my-4"></div>
          
          <section class="mb-4">
            <div class="flex gap-4 flex-col lg:flex-row">
              <div class="tickers w-full max-w-[500px] mx-auto"> 
                <div class="mb-2">
                  <div class="flex items-center">
                    <button @click="toggleOrderBookModal" class="bg-[--color-primary-blue] text-white px-2 py-1 rounded text-sm ml-2 font-rajdhani">
                        Order Book
                    </button>
                    <button @click="openShareModal" class="bg-[--color-primary-blue] text-white px-2 py-1 rounded text-sm ml-2 font-rajdhani">
                        Share
                    </button>
                    <h2 class="text-glow font-bold text-xl ml-2">Ticker List</h2>
                  </div>
                  <div class="delimiter2 my-4"></div>
                  <div class="cb flex items-center" style="max-height: 100px;">
                    <div class="h-5 w-5 ml-3 mr-4">
                      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M21.172 24l-7.387-7.387c-1.388.874-3.024 1.387-4.785 1.387-4.971 0-9-4.029-9-9s4.029-9 9-9 9 4.029 9 9c0 1.761-.514 3.398-1.387 4.785l7.387 7.387-2.828 2.828zm-12.172-8c3.859 0 7-3.14 7-7s-3.141-7-7-7-7 3.14-7 7 3.141 7 7 7z"></path></svg>
                    </div>
                    <input v-model="inputSearch" ref="searchInput" class="w-full h-10 bg-transparent focus:outline-none" name="query" placeholder="Search..." type="text" @keypress="handleKeyPress">
                  </div>
                </div>
                <div class="mb-2">
                    <ul class="flex gap-2 justify-between h-10 flex-wrap"> 
                        <li @click="filterAsset('USDT')" :class="[asset === 'USDT' ? 'active' : '']" class="cb2 flex flex-grow items-center justify-center cursor-pointer">USDT</li>
                        <li @click="filterAsset('BTC')" :class="[asset === 'BTC' ? 'active' : '']" class="cb2 flex flex-grow items-center justify-center cursor-pointer">BTC</li>
                        <li @click="filterAsset('FAV')" :class="[asset === 'FAV' ? 'active' : '']" class="cb2 flex flex-grow items-center justify-center cursor-pointer">
                            FAV
                            <span v-if="favorites.length > 0" class="text-[--color-primary-yellow]">★</span> 
                        </li>
                    </ul>
                </div>
                <div class="cb pr-4 pb-4">
                  <div class="header flex items-center h-8 px-2 cursor-pointer">
                    <div @click="sortBy('token', 'desc')" :class="[sort === 'token' ? 'font-bold' : '']" class="w-1/4">Pair</div>
                    <div @click="sortBy('close', 'desc')" :class="[sort === 'close' ? 'font-bold' : '']" class="w-1/4 text-center">Price</div>
                    <div @click="sortBy('percent', 'desc')" :class="[sort === 'percent' ? 'font-bold' : '']" class="w-1/4 text-end pr-2">Change%</div>
                    <div @click="sortBy('assetVolume', 'desc')" :class="[sort === 'assetVolume' ? 'font-bold' : '']" class="w-1/4 text-end pl-2 pr-8">Volume</div>
                  </div>
      
                  <div class="body h-[454px] relative overflow-y-scroll px-2">
                    <div v-if="Object.keys(tickers).length < 200" class="h-full flex items-center justify-center">
                      <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="var(--color-primary-yellow)" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                    </div>
                    <div v-else>
                      <div v-for="ticker in filterTickers" :key="ticker.symbol" class="flex hover:bg-[#eab30840] cursor-pointer" style="font-family: 'Roboto Mono', monospace;">
                        <div @click="changeTicker(ticker.symbol)" class="w-1/4 dotdotdot silver">{{ticker.pair}}</div>
                        <div @click="changeTicker(ticker.symbol)" :class="ticker.style" class="w-1/4 dotdotdot text-end">{{ticker.close}}</div>
                        <div @click="changeTicker(ticker.symbol)" :class="ticker.style" class="w-1/4 dotdotdot text-center">{{ticker.arrow}} {{ticker.percent.toFixed(2)}}</div>
                        <div class="w-1/4 dotdotdot silver text-end flex gap-2 justify-end">
                          <span @click="changeTicker(ticker.symbol)" class="text-sm">{{ticker.assetVolume}}</span>
                          <span @click="setFavorite(ticker.symbol)">
                            <svg :class="favorites.includes(ticker.symbol) ? 'fill-[--color-primary-yellow]' : 'fill-gray-400'" class="hover:fill-[--color-primary-yellow]" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24"><path d="M12 .587l3.668 7.568 8.332 1.151-6.064 5.828 1.48 8.279-7.416-3.967-7.417 3.967 1.481-8.279-6.064-5.828 8.332-1.151z"/></svg>
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- TradingView Chart -->
              <div class="chart flex-grow mt-0">
                <div class="flex items-center justify-between">
                  <h2 class="text-glow font-bold text-xl">Trading Chart</h2>
                </div>
                <div class="delimiter2 my-4"></div>
                <div class="cb relative" style="height: 650px; width: 100%;">
                  <div :id="container_id" style="height: 100%; width: 100%;"></div>
                </div>
              </div>

              
              <div v-if="showOrderBookModal" id="orderBookModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
                <div class="bg-[--color-bg--300] rounded-lg p-4 w-5/6 max-w-4xl">
                  <div class="flex justify-between items-center">
                    <h2 class="text-lg font-bold text-[--color-primary-silver]">Order Book for {{ currentTicker }}</h2>
                    <button @click="toggleOrderBookModal" class="text-red-500">Close</button>
                  </div>
                  <div class="mt-4">
                    <div class="flex flex-col lg:flex-row gap-4">
                      <!-- Order Book Sale -->
                      <div class="cb pr-4 pb-0 flex-1 overflow-hidden">
                        <h3 class="text-glow font-bold text-lg">Order Book Sale</h3>
                        <div class="flex gap-2 items-center h-8 px-2">
                          <div class="flex flex-1 text-[--color-primary-green]">
                            <div class="w-1/3">Total</div>
                            <div class="w-1/3 text-center">Size</div>
                            <div class="w-1/3 text-end">Price</div>
                          </div>
                        </div>
                        <div class="relative overflow-y-scroll px-2 h-[150px]">
                          <div class="flex gap-2 flex-row">
                            <div class="flex-1">
                              <div v-for="order in asks" :key="order[0]" class="flex gap-2" :style="`background: linear-gradient(to right, #ff000030 0 ${(order[2] / maxAsk) * 100}%, #ffffff00 ${(order[2] / maxAsk) * 100}% 100%)`">
                                <div class="w-1/3 flex-1 text-left">{{ parseNumber((order[0] * order[1]), asset) }}</div>
                                <div class="w-1/3 flex-1 text-center text-[--color-primary-silver]">{{ parseFloat(order[1]).toFixed(4) }}</div>
                                <div class="w-1/3 flex-1 text-end text-[--color-primary-silver]">{{ parseFloat(order[0]).toFixed(2) }}</div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>

                      <!-- Order Book Buy -->
                      <div class="cb pr-4 pb-0 flex-1 overflow-hidden">
                        <h3 class="text-glow font-bold text-lg">Order Book Buy</h3>
                        <div class="flex gap-2 items-center h-8 px-2">
                          <div class="flex flex-1 text-[--color-primary-green]">
                            <div class="w-1/3">Total</div>
                            <div class="w-1/3 text-center">Size</div>
                            <div class="w-1/3 text-end">Price</div>
                          </div>
                        </div>
                        <div class="relative overflow-y-scroll px-2 h-[150px]">
                          <div class="flex gap-2 flex-row">
                            <div class="flex-1">
                              <div v-for="order in bids" :key="order[0]" class="flex gap-2" :style="`background: linear-gradient(to left, #00ff0030 0 ${(order[2] / maxAsk) * 100}%, #ffffff00 ${(order[2] / maxAsk) * 100}% 100%)`">
                                <div class="w-1/3 flex-1 text-[--color-primary-silver]">{{parseNumber((order[0] * order[1]), asset)}}</div>
                                <div class="w-1/3 flex-1 text-center text-[--color-primary-silver]">{{parseFloat((order[1]))}}</div>
                                <div class="w-1/3 flex-1 text-end text-[--color-primary-green]">{{parseFloat(order[0])}}</div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>

          <!-- Settings Modal -->
          <div v-if="showSettings" id="staticModal" class="bg-[#00000080] fixed flex items-center justify-center top-0 left-0 right-0 z-50 w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full">
            <!-- Modal content -->
            <div class="relative w-full max-w-2xl max-h-full">
              <div class="relative">
                <div class="flex">
                  <div class="cb-left mr-[1px]">
                    <div></div>
                  </div>
                  <div class="cb !bg-[--color-primary-black] px-6 py-2 w-full">
                    <p class="uppercase text-xl border-b-[1px] border-[#441618] pb-1 mb-2">Settings</p>
                    <p class="uppercase text-xl text-[--color-primary-blue]">Enable trading</p>
                    <p class="mb-2">Toggle ON or OFF the ability to trade on this terminal.</p>
                    <label class="relative inline-flex items-center cursor-pointer">
                      <input type="checkbox" value="" class="sr-only peer">
                      <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                      <span class="ml-3 text-sm font-medium text-gray-900 dark:text-gray-300">Enable trading</span>
                    </label>
                    <p class="uppercase text-xl text-[--color-primary-blue]">API KEY</p>
                    <p class="mb-2">Enter your API KEY from Exchange Test and allow IP address <span class="text-[--color-primary-yellow]">127.0.0.1</span>.</p>
                    <div class="cb w-96">
                      <input class="h-10 w-full px-4 bg-transparent focus:outline-none" placeholder="Do not enter any live API KEY!">
                    </div>
                  </div>
                </div>
                
                <div class="mt-10 flex gap-1 justify-center">
                  <div class="cb-style3">
                    <div data-modal-hide="staticModal" type="button" class="relative flex gap-2 items-center justify-center">
                      <span class="bg-[--color-primary-blue] rounded-full w-5 h-5 block border-1 border-[--color-primary-black]">
                        <svg class="scale-75 fill-[--color-primary-black]" clip-rule="evenodd" fill-rule="evenodd" stroke-linejoin="round" stroke-miterlimit="2" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="m9.831 16.198.002-.003-1.113-.996-.004.004-2.468-2.202c-.144-.128-.322-.191-.5-.191-.417 0-.749.337-.749.75 0 .206.084.412.249.56l2.478 2.21-.767.873-4.71-4.202c-.144-.128-.322-.191-.5-.191-.416 0-.749.337-.749.75 0 .206.084.412.25.56l5.268 4.7c.143.128.321.191.499.191.206 0 .41-.084.559-.25l1.264-1.437 1.677 1.496c.143.128.321.191.499.191.206 0 .409-.084.558-.25l11.234-12.499c.129-.143.192-.322.192-.501 0-.419-.338-.75-.748-.75-.206 0-.411.084-.559.249l-10.735 11.943zm-.451-1.75 1.114.996 8.316-9.182c.128-.143.191-.322.191-.501 0-.419-.337-.75-.748-.75-.206 0-.411.084-.559.249z" fill-rule="nonzero"/></svg>
                      </span>
                      <span class="font-semibold">Confirm</span>
                    </div>
                  </div>
                  <div @click="toggleSettings" class="cb-style3">
                    <div data-modal-hide="staticModal" type="button" class="relative flex gap-2 items-center justify-center">
                      <span class="bg-[--color-primary-blue] rounded-full w-5 h-5 block border-1 border-[--color-primary-black] flex items-center justify-center">
                        <svg class="fill-[--color-primary-black]" xmlns="http://www.w3.org/2000/svg" width="11" height="11" viewBox="0 0 24 24"><path d="M24 3.752l-4.423-3.752-7.771 9.039-7.647-9.008-4.159 4.278c2.285 2.885 5.284 5.903 8.362 8.708l-8.165 9.447 1.343 1.487c1.978-1.335 5.981-4.373 10.205-7.958 4.304 3.67 8.306 6.663 10.229 8.006l1.449-1.278-8.254-9.724c3.287-2.973 6.584-6.354 8.831-9.245z"/></svg>
                      </span>
                      <span class="font-semibold">Cancel</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div v-if="showShareModal" id="shareModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
            <div class="bg-[--color-bg--300] rounded-lg p-4 w-5/6 max-w-4xl">
                <div class="flex justify-between items-center">
                    <h2 class="text-lg font-bold text-[--color-primary-silver]">Поделиться тикером</h2>
                    <button @click="toggleShareModal" class="bg-red-500 text-white px-4 py-2 rounded">Close</button>
                </div>
                <div class="mt-4">
                    <select v-model="selectedTicker" class="w-full p-2 border rounded">
                        <option value="" disabled selected>-- Выберите тикер --</option>
                        <option v-for="ticker in filterTickers" :key="ticker.symbol" :value="ticker.symbol">
                            {{ ticker.pair }} - Price: {{ ticker.close }}
                        </option>
                    </select>
                </div>
                <div class="mt-4 flex justify-end">
                    <button @click="shareTicker(selectedTicker)" class="bg-[--color-primary-blue] text-white px-4 py-2 rounded">Share</button>
                </div>
            </div>
          </div>

          <!-- Referral Modal -->
          <div v-if="showReferralModal" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
            <div class="bg-[--color-bg--300] rounded-lg p-6 w-96">
              <div class="flex justify-between items-center mb-4">
                <h2 class="text-xl font-bold text-[--color-primary-silver]">Referral Program</h2>
                <button @click="toggleReferralModal" class="text-red-500">×</button>
              </div>

              <div class="space-y-4">
                <div class="bg-[--color-bg--500] p-4 rounded">
                  <p class="text-sm mb-2">Your Referral Stats</p>
                  <div class="grid grid-cols-2 gap-4">
                    <div>
                      <p class="text-[--color-primary-blue]">{{referralStats.totalReferrals}}</p>
                      <p class="text-xs">Total Referrals</p>
                    </div>
                    <div>
                      <p class="text-[--color-primary-green]">{{referralStats.totalRewards}} USDT</p>
                      <p class="text-xs">Total Rewards</p>
                    </div>
                  </div>
                </div>

                <div>
                  <p class="text-sm mb-2">Share Your Referral Link</p>
                  <button 
                    @click="copyReferralLink"
                    class="w-full bg-[--color-primary-blue] text-white px-4 py-2 rounded flex items-center justify-center gap-2"
                  >
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="18" cy="5" r="3"/><circle cx="6" cy="12" r="3"/><circle cx="18" cy="19" r="3"/><line x1="8.59" y1="13.51" x2="15.42" y2="17.49"/><line x1="15.41" y1="6.51" x2="8.59" y2="10.49"/></svg>
                    Copy Referral Link
                  </button>
                </div>

                <div class="text-sm">
                  <h3 class="font-bold mb-2">How it works:</h3>
                  <ul class="list-disc pl-4 space-y-1">
                    <li>Share your referral link with friends</li>
                    <li>Earn 10% of their trading fees</li>
                    <li>No limit on referrals</li>
                    <li>Instant rewards distribution</li>
                  </ul>
                </div>
              </div>
            </div>
          </div>
        </div>
    </div>
<script>
    const { createApp } = Vue
    
    createApp({
        data() {
            return {
                sock: null,
                status: 0,
                tickers: {},
                cache: [],
                trades: [],
                favorites: JSON.parse(localStorage.getItem('favorites')) || ['BTCUSDT'],
                interval: '1d',
                digitalClock: null,
                asks: [],
                bids: [],
                maxAsk: 0,
                bgImageUrl: null,
                showSettings: false,
                showLatestTrades: true,
                inputSearch: '',
                asset: 'USDT', 
                sort: 'assetVolume',
                order: 'desc',
                ticker: 'BTCUSDT',
                container_id: 'vue-trading-view',
                change: 'change',
                options: {
                    autosize: true,
                    symbol: 'BINANCE:BTCUSDT',
                    interval: '30',
                    timezone: 'Europe/Moscow',
                    theme: 'dark',
                    style: '1',
                    locale: 'en',
                    toolbar_bg: '#f1f3f6',
                    enable_publishing: false,
                    withdateranges: true,
                    hide_side_toolbar: false,
                    allow_symbol_change: true,
                    save_image: true,
                    details: false,
                    hotlist: false,
                    studies: [
                        {
                            id: 'VWAP@tv-basicstudies',
                        },
                        {
                            id: 'MAExp@tv-basicstudies',
                            inputs: {
                                length: 200
                            },
                            styles: {}
                        }
                    ],
                },
                showOrderBookModal: false, 
                currentTicker: '', 
                showShareModal: false,
                selectedTicker: '',
                showReferralModal: false,
                referralStats: {
                    totalReferrals: 0,
                    totalRewards: 0
                },
                currentUser: {
                    id: '12345' // This should be replaced with actual user ID from your auth system
                }
            }
        },
        methods: {
            toggleSettings() {
                this.showSettings = !this.showSettings;
            },
            toggleLatestTrades() {
                this.showLatestTrades = !this.showLatestTrades;
            },
            startClock() {
                this.digitalClock = new Date().toLocaleTimeString();
                setTimeout(() => { this.startClock() }, 1000);
            },
            sockInit() {
                this.sock = new WebSocket('wss://stream.binance.com:9443/ws');
                this.sock.onopen = this.sockOpen;
                this.sock.onmessage = this.sockMessage;
                this.sock.onclose = this.sockClose;
                this.sock.onerror = this.sockError;
            },
            sockOpen() {
                this.status = 1;
                this.sock.send(JSON.stringify({
                    "method": "SUBSCRIBE",
                    "params": [
                        "!ticker@arr"
                    ],
                    "id": 1
                }));
            },
            sockMessage(e) {
                let data = JSON.parse(e.data);
                if (Array.isArray(data)) {
                    data.forEach(ticker => {
                        // Изменено: добавлено условие для фильтрации по активу
                        if (this.asset === 'BTC' && ticker.s.endsWith('BTC')) {
                            this.tickers[ticker.s] = {
                                symbol: ticker.s,
                                pair: ticker.s.replace('BTC', '') + '/BTC',
                                token: ticker.s.replace('BTC', ''),
                                asset: this.asset,
                                close: parseFloat(ticker.c).toFixed(8),
                                open: parseFloat(ticker.o).toFixed(8),
                                high: parseFloat(ticker.h).toFixed(8),
                                low: parseFloat(ticker.l).toFixed(8),
                                volume: parseFloat(ticker.v).toFixed(8),
                                quoteVolume: parseFloat(ticker.q).toFixed(8),
                                tokenVolume: parseFloat(ticker.v).toFixed(2),
                                assetVolume: parseFloat(ticker.q).toFixed(2),
                                percent: parseFloat(ticker.P),
                                arrow: parseFloat(ticker.P) >= 0 ? '↑' : '↓',
                                style: parseFloat(ticker.P) >= 0 ? 'text-[--color-primary-green]' : 'text-[--color-primary--500]'
                            }
                        } else if (this.asset === 'USDT' && ticker.s.endsWith('USDT')) {
                            this.tickers[ticker.s] = {
                                symbol: ticker.s,
                                pair: ticker.s.replace('USDT', '') + '/USDT',
                                token: ticker.s.replace('USDT', ''),
                                asset: this.asset,
                                close: parseFloat(ticker.c).toFixed(8),
                                open: parseFloat(ticker.o).toFixed(8),
                                high: parseFloat(ticker.h).toFixed(8),
                                low: parseFloat(ticker.l).toFixed(8),
                                volume: parseFloat(ticker.v).toFixed(8),
                                quoteVolume: parseFloat(ticker.q).toFixed(8),
                                tokenVolume: parseFloat(ticker.v).toFixed(2),
                                assetVolume: parseFloat(ticker.q).toFixed(2),
                                percent: parseFloat(ticker.P),
                                arrow: parseFloat(ticker.P) >= 0 ? '↑' : '↓',
                                style: parseFloat(ticker.P) >= 0 ? 'text-[--color-primary-green]' : 'text-[--color-primary--500]'
                            }
                        }
                    });
                    this.status = 2;
                }
            },
            sockClose() {
                this.status = 0;
                console.log('socket closed');
            },
            sockError(e) {
                this.status = 0;
                console.log('socket error:', e);
            },
            changeTicker(symbol) {
                this.ticker = symbol;
                this.currentTicker = symbol;
                this.options.symbol = 'BINANCE:' + symbol;
                if (window.tvWidget) {
                    window.tvWidget.setSymbol('BINANCE:' + symbol);
                }
            },
            setFavorite(symbol) {
                if (this.favorites.includes(symbol)) {
                    this.favorites = this.favorites.filter(item => item !== symbol);
                } else {
                    this.favorites.push(symbol);
                }
                localStorage.setItem('favorites', JSON.stringify(this.favorites));
            },
            filterAsset(asset) {
                this.asset = asset; 
                this.status = 1; 
                
            },
            sortBy(field, order) {
                this.sort = field;
                this.order = order;
            },
            parseNumber(number, asset) {
                if (asset === 'USDT') {
                    return new Intl.NumberFormat('en-US', {
                        style: 'currency',
                        currency: 'USD',
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    }).format(number);
                }
                return parseFloat(number).toFixed(8);
            },
            timestampToDate(timestamp) {
                return new Date(timestamp).toLocaleTimeString("en-GB");
            },
            appendScript(onload) {
                const script = document.createElement('script');
                script.src = 'https://s3.tradingview.com/tv.js';
                script.async = true;
                script.onload = onload;
                document.head.appendChild(script);
            },
            initWidget() {
                const widget = new TradingView.widget({
                    container_id: this.container_id,
                    width: '100%', 
                    height: '500px', 
                    ...this.options
                });
                window.tvWidget = widget;
            },
            async prepareOrderBook() {
                await fetch('https://api.binance.com/api/v3/depth?symbol=' + this.ticker + '&limit=100')
                .then(response => response.json())
                .then(data => {
                    console.log('Order Book Data:', data);
                    this.asks = data.asks;
                    this.bids = data.bids;

                    for (let i = 0; i < this.asks.length; i++) {
                        var arr = this.asks.map(x => {
                            return Number(x[1]);
                        });
                        this.asks[i].push(arr.slice(0, i + 1).reduce((a, b) => a + b));
                    }
                    for (let i = 0; i < this.bids.length; i++) {
                        var arr = this.bids.map(x => {
                            return Number(x[1]);
                        });
                        this.bids[i].push(arr.slice(0, i + 1).reduce((a, b) => a + b));
                    }
                });

                this.maxAsk = Math.max(...this.asks.map(x => { return x[2] }));
                setTimeout(async () => { await this.prepareOrderBook() }, 500);
            },
            toggleOrderBookModal() {
                this.showOrderBookModal = !this.showOrderBookModal;
                if (this.showOrderBookModal) {
                    document.body.classList.add('no-scroll'); 
                } else {
                    document.body.classList.remove('no-scroll'); 
                }
            },
            closeKeyboard() {
                this.$refs.searchInput.blur(); 
            },
            handleKeyPress(event) {
                if (event.key === 'Enter') {
                    this.closeKeyboard(); 
                }
            },
            handleClick(event) {
                
                if (this.$refs.searchInput && !this.$refs.searchInput.contains(event.target)) {
                    this.closeKeyboard(); 
                }
            },
            openShareModal() {
                this.showShareModal = true;
            },
            toggleShareModal() {
                this.showShareModal = !this.showShareModal;
            },
            shareTicker(ticker) {
                const selectedTickerData = this.tickers[ticker];
                const telegramMessage = `${selectedTickerData.pair}, Price: ${selectedTickerData.close} @TraderPunkbot!`;
                const telegramUrl = `https://t.me/share/url?url=${encodeURIComponent(telegramMessage)}`;
                
                // Открываем ссылку в новой вкладке
                window.open(telegramUrl, '_blank');
                
                // Закрываем модальное окно после отправки
                this.toggleShareModal();
            },
            toggleReferralModal() {
                this.showReferralModal = !this.showReferralModal;
            },
            copyReferralLink() {
                const referralLink = `https://t.me/BTCPunkTradebot?start=${this.currentUser.id}`;
                navigator.clipboard.writeText(referralLink);
                alert('Referral link copied to clipboard!');
            },
        },
        mounted() {
            this.sockInit();
            this.startClock();
            this.appendScript(this.initWidget);
            this.prepareOrderBook();
            this.initWidget(); 
            this.favorites = JSON.parse(localStorage.getItem('favorites')) || ['BTCUSDT']; 

            
            window.addEventListener('click', this.handleClick);
        },
        beforeUnmount() {
            this.sockClose();

          
            window.removeEventListener('click', this.handleClick);
        },
        computed: {
            statusMsg() {
                let msg = '';
                if (this.status == 0) {
                    msg = 'Connecting...';
                }
                if (this.status == 1) {
                    msg = 'Loading...';
                }
                if (this.status == 2) {
                    msg = 'Done';
                }
                return msg;
            },
            filterTickers() {
                let tickers = Object.values(this.tickers);
        
                // Фильтрация по избранным тикерам
                if (this.asset === 'FAV') {
                    tickers = tickers.filter(ticker => this.favorites.includes(ticker.symbol));
                } else {
                    // Фильтрация по текущему активу (USDT или BTC)
                    tickers = tickers.filter(ticker => ticker.symbol.includes(this.asset));
                }
        
                // Фильтрация по поисковому запросу
                if (this.inputSearch) {
                    tickers = tickers.filter(ticker => 
                        ticker.token.toLowerCase().includes(this.inputSearch.toLowerCase())
                    );
                }
        
                return tickers.sort((a, b) => {
                    if (this.order === 'desc') {
                        return b[this.sort] - a[this.sort];
                    }
                    return a[this.sort] - b[this.sort];
                });
            },
            latestTrades() {
                return this.showLatestTrades ? this.trades : [];
            }
        }
    }).mount('#app')
</script>
<style>
    @import url('https://fonts.googleapis.com/css2?family=Rajdhani:wght@300;400;500;600;700&display=swap');
    @import url('https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@100;200;300;400;700&display=swap');

    :root {
        --ui-notch-amount: 0.5rem;
        --ui-notch-hypotenuse: 0.7071067811865476rem;
        --ui-notch-path: polygon(
            var(--ui-notch-amount) 0,
            calc(100% - var(--ui-notch-amount)) 0,
            100% var(--ui-notch-amount),
            100% calc(100% - var(--ui-notch-amount)),
            calc(100% - var(--ui-notch-amount)) 100%,
            var(--ui-notch-amount) 100%,
            0 calc(100% - var(--ui-notch-amount)),
            0 var(--ui-notch-amount)
        );
        --ui-notch-path-r: polygon(
            0 var(--ui-notch-amount),
            var(--ui-notch-amount) 0,
            calc(100% - var(--ui-notch-amount)) 0,
            100% var(--ui-notch-amount),
            100% calc(100% - var(--ui-notch-amount)),
            calc(100% - var(--ui-notch-amount)) 100%,
            var(--ui-notch-amount) 100%,
            0 calc(100% - var(--ui-notch-amount))
        );
        --ui-glow-text: 0 0 0.125em currentColor;
    }

    body {
        --color-bg--300: #1e181ef0; 
        --color-bg--500: #191a1e; 
        --color-primary--500: #e8615a; 
        --color-primary--600: #7A0B7A; 
        --color-primary-black: #0e0e18; 
        --color-primary-red: #710000; 
        --color-primary-yellow: #FDF500;
        --color-primary-green: #1AC5B0; 
        --color-primary-blue: #37EBF3; 
        --color-primary-purple: #7A0B7A;
        --color-primary-pink1: #E455AE; 
        --color-primary-pink2: #CB1DCD; 
        --color-primary-silver: #D1C5C0; 
        --color-secondary-blue: #37EBF360; 
    
        margin: 0; 
        min-height: 100vh; 
        background-color: var(--color-bg--500);
        color: var(--color-primary-silver); 
        font-family: 'Orbitron', sans-serif; 
    }

    .text-glow {
        text-shadow: var(--ui-glow-text);
    }

    .delimiter {
        height: 1px;
        background: var(--color-primary-purple); 
    }

    .delimiter2 {
        height: 1px;
        background: linear-gradient(90deg, transparent, var(--color-primary--600) 50%, transparent);
    }

    .status {
        width: 10px;
        height: 10px;
        border-radius: 50%;
    }

    .red {
        background-color: var(--color-primary--500);
        box-shadow: 0 0 10px var(--color-primary--500);
    }

    .green {
        background-color: var(--color-primary-green);
        box-shadow: 0 0 10px var(--color-primary-green);
    }

    .silver {
        color: var(--color-primary-silver);
    }

    .cb, .cb2 {
        position: relative;
        background-color: var(--color-bg--300);
        -webkit-clip-path: var(--ui-notch-path);
        clip-path: var(--ui-notch-path);
        padding-right: 0.5rem;
        border: 2px solid var(--color-primary-purple); 
        box-shadow: 0 0 10px 4px rgba(128, 0, 128, 0.9); 
    }

    .cb:hover, .cb2:hover {
       
    }

    .cb::before {
        background-color: var(--color-primary--600);
        bottom: 5px;
        content: "";
        display: block;
        height: 3px;
        position: absolute;
        right: -6px;
        top: auto;
        transform: rotate(-45deg);
        width: var(--ui-notch-hypotenuse);
        z-index: 100;
    }

    .cb-reverse {
        clip-path: var(--ui-notch-path-r);
    }

    .cb-reverse::before {
        transform: rotate(45deg);
        left: -6px;
    }

    .cb2::before {
        background-color: var(--color-primary--600);
        bottom: 5px;
        content: "";
        display: block;
        height: 3px;
        position: absolute;
        right: -6px;
        top: auto;
        transform: rotate(-45deg);
        width: var(--ui-notch-hypotenuse);
        z-index: 100;
    }

    .cb_tab {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
        height: 50px; 
        min-width: 250px;
        text-transform: uppercase;
        letter-spacing: 0.035rem;
        text-shadow: var(--ui-glow-text);
        color: var(--color-primary--500);
        background-color: var(--color-primary--600);
        cursor: pointer;
        border: 0;
        outline: none;
        clip-path: polygon(
            4rem 0, 
            4.5rem 0.25rem, 
            100% 0.25rem, 
            100% calc(100% - var(--ui-notch-amount) + 2px),
            calc(100% - var(--ui-notch-amount) + 2px) 100%, 
            0 100%, 
            0 0
        );
    }

    .cb_tab:hover,
    .cb_tab.active {
        color: var(--color-primary-blue);
    }

    .cb_tab div {
        position: absolute;
        padding-top: 5px;
        top: 0.1rem;
        left: 0.1rem;
        right: 0.1rem;
        bottom: 0.1rem;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: var(--color-bg--300);
        clip-path: polygon(
            4rem 0, 
            4.5rem 0.25rem, 
            100% 0.25rem, 
            100% calc(100% - var(--ui-notch-amount) + 2px),
            calc(100% - var(--ui-notch-amount) + 2px) 100%, 
            0 100%, 
            0 0
        );
    }
    
    .cb {
        height: 100%; 
        width: 100%;  
    }

    .overflow-y-scroll::-webkit-scrollbar {
        background: transparent;
        width: 5px;
    }
     
    .overflow-y-scroll::-webkit-scrollbar-thumb {
        background-color: var(--color-primary--500);
    }
      
    .v-enter-active,
    .v-leave-active {
        opacity: 0;  
        transition: opacity 0.5s ease;
    }
    
    .v-enter-from,
    .v-leave-to {
        opacity: 0;
        transition: opacity 0.5s ease;
    }

    .dotdotdot {
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow: hidden;
    }

    .tickers .header,
    .trades .header,
    .orders .header {
        color: var(--color-primary-blue);
    }

    .orders .header > div,
    .orders .body > div {
        flex: 1; 
    }

    .no-scroll {
        overflow: hidden; 
        height: 100%; 
    }

    .font-rajdhani {
        font-family: 'Rajdhani', sans-serif; 
    }

    select {
        color: black; /* Устанавливаем цвет текста на черный */
    }
</style>
</body>
</html>