<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>Binance Trade Punk</title>
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Rajdhani:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@100;200;300;400;700&display=swap" rel="stylesheet">
    <script src="https://cdn.tailwindcss.com"></script>
</head>
<body>
    <div id="app">
        <div class="relative p-4">
          <header class="flex relative h-14 gap-4 items-center justify-between px-2 text-sm lg:text-xl">
            <div class="flex items-center">
              <div :class="[status === 0 ? 'red' : 'green']" class="status mx-3"> </div>
              <div class="clock">{{ digitalClock }}</div>
            </div>
            
            <Transition>
              <div v-if="!tickers[ticker]" class="flex flex-grow justify-center absolute w-full">
                <span class="animate-pulse">
                  {{statusMsg}}
                </span>
              </div>
            </Transition>
           
            <Transition>
              <div v-if="tickers[ticker]" class="flex gap-2 flex-grow items-center justify-between delay-200">
                <div class="w-1/2">
                  <div class="flex gap-2">
                    <small>{{tickers[ticker]['pair']}}</small>
                    <span :class="tickers[ticker]['style']">
                      <span class="mr-1">{{tickers[ticker]['arrow']}}</span>
                      <span>{{tickers[ticker]['percent'].toFixed(2)}}%</span>
                    </span>
                  </div>
                  <div>
                    <span :class="tickers[ticker]['style']">{{parseNumber(tickers[ticker]['close'], tickers[ticker]['asset'])}}</span>
                  </div>
                </div>
                <div class="w-1/2">
                  <small class="block">24H Highest</small>
                  <span>{{parseNumber(tickers[ticker]['high'], tickers[ticker]['asset'])}}</span>
                </div>
                <div class="w-1/2">
                  <small class="block">24H Lowest</small>
                  <span>{{parseNumber(tickers[ticker]['low'], tickers[ticker]['asset'])}}</span>
                </div>
                <div class="w-1/2 hidden">
                  <small class="block">24H Volume</small>
                  <span>{{parseNumber(tickers[ticker]['tokenVolume'], tickers[ticker]['token'])}} {{tickers[ticker]['token']}}</span>
                </div>
                <div class="w-1/2 hidden">
                  <small class="block">24H Value</small>
                  <span>{{parseNumber(tickers[ticker]['assetVolume'], tickers[ticker]['asset'])}} {{tickers[ticker]['asset']}}</span>
                </div>
              </div>
            </Transition>
          </header>
            <div class="delimiter my-4"></div>
          
          <section class="mb-4">
            <div class="flex gap-4 flex-col lg:flex-row">
              <div class="tickers w-full max-w-[500px] mx-auto"> 
                <div class="mb-2">
                  <div class="flex items-center">
                    <button @click="toggleOrderBookModal" class="bg-[--color-primary-blue] text-white px-2 py-1 rounded text-sm ml-2 font-rajdhani">
                        Order Book
                    </button>
                    <button @click="openShareModal" class="bg-[--color-primary-blue] text-white px-2 py-1 rounded text-sm ml-2 font-rajdhani">
                        Share
                    </button>
                    <button @click="toggleCalculator" class="bg-[--color-primary-blue] text-white px-2 py-1 rounded text-sm ml-2 font-rajdhani">
                        Calculator
                    </button>
                    <button @click="togglePortfolio" class="bg-[--color-primary-blue] text-white px-2 py-1 rounded text-sm ml-2 font-rajdhani">
                        Portfolio
                    </button>
                    <h2 class="text-glow font-bold text-xl ml-2"></h2>
                  </div>
                  <div class="delimiter2 my-4"></div>
                  <div class="cb flex items-center" style="max-height: 100px;">
                    <div class="h-5 w-5 ml-3 mr-4">
                      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path d="M21.172 24l-7.387-7.387c-1.388.874-3.024 1.387-4.785 1.387-4.971 0-9-4.029-9-9s4.029-9 9-9 9 4.029 9 9c0 1.761-.514 3.398-1.387 4.785l7.387 7.387-2.828 2.828zm-12.172-8c3.859 0 7-3.14 7-7s-3.141-7-7-7-7 3.14-7 7 3.141 7 7 7z"></path></svg>
                    </div>
                    <input v-model="inputSearch" ref="searchInput" class="w-full h-10 bg-transparent focus:outline-none" name="query" placeholder="Search..." type="text" @keypress="handleKeyPress">
                  </div>
                </div>
                <div class="mb-2">
                    <ul class="flex gap-2 justify-between h-10 flex-wrap"> 
                        <li @click="filterAsset('USDT')" :class="[asset === 'USDT' ? 'active' : '']" class="cb2 flex flex-grow items-center justify-center cursor-pointer">USDT</li>
                        <li @click="filterAsset('BTC')" :class="[asset === 'BTC' ? 'active' : '']" class="cb2 flex flex-grow items-center justify-center cursor-pointer">BTC</li>
                        <li @click="filterAsset('FAV')" :class="[asset === 'FAV' ? 'active' : '']" class="cb2 flex flex-grow items-center justify-center cursor-pointer">
                            FAV
                            <span v-if="favorites.length > 0" class="text-[--color-primary-yellow]">★</span> 
                        </li>
                    </ul>
                </div>
                <div class="cb pr-4 pb-4">
                  <div class="header flex items-center h-8 px-2 cursor-pointer">
                    <div @click="sortBy('token', 'desc')" :class="[sort === 'token' ? 'font-bold' : '']" class="w-1/4">Pair</div>
                    <div @click="sortBy('close', 'desc')" :class="[sort === 'close' ? 'font-bold' : '']" class="w-1/4 text-center">Price</div>
                    <div @click="sortBy('percent', 'desc')" :class="[sort === 'percent' ? 'font-bold' : '']" class="w-1/4 text-end pr-2">Change%</div>
                    <div @click="sortBy('assetVolume', 'desc')" :class="[sort === 'assetVolume' ? 'font-bold' : '']" class="w-1/4 text-end pl-2 pr-8">Volume</div>
                  </div>
      
                  <div class="body h-[454px] relative overflow-y-scroll px-2">
                    <div v-if="Object.keys(tickers).length < 200" class="h-full flex items-center justify-center">
                      <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="var(--color-primary-yellow)" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                      </svg>
                    </div>
                    <div v-else>
                      <div v-for="ticker in filterTickers" :key="ticker.symbol" class="flex hover:bg-[#eab30840] cursor-pointer" style="font-family: 'Roboto Mono', monospace;">
                        <div @click="changeTicker(ticker.symbol)" class="w-1/4 dotdotdot silver">{{ticker.pair}}</div>
                        <div @click="changeTicker(ticker.symbol)" :class="ticker.style" class="w-1/4 dotdotdot text-end">{{ticker.close}}</div>
                        <div @click="changeTicker(ticker.symbol)" :class="ticker.style" class="w-1/4 dotdotdot text-center">{{ticker.arrow}} {{ticker.percent.toFixed(2)}}</div>
                        <div class="w-1/4 dotdotdot silver text-end flex gap-2 justify-end">
                          <span @click="changeTicker(ticker.symbol)" class="text-sm">{{ticker.assetVolume}}</span>
                          <span @click="setFavorite(ticker.symbol)">
                            <svg :class="favorites.includes(ticker.symbol) ? 'fill-[--color-primary-yellow]' : 'fill-gray-400'" class="hover:fill-[--color-primary-yellow]" xmlns="http://www.w3.org/2000/svg" width="18" height="18" viewBox="0 0 24 24"><path d="M12 .587l3.668 7.568 8.332 1.151-6.064 5.828 1.48 8.279-7.416-3.967-7.417 3.967 1.481-8.279-6.064-5.828 8.332-1.151z"/></svg>
                          </span>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <div class="chart flex-grow mt-0">
                <div class="flex items-center justify-between">
                  <h2 class="text-glow font-bold text-xl">Trading Chart</h2>
                </div>
                <div class="delimiter2 my-4"></div>
                <div class="cb relative" style="height: 650px; width: 100%;">
                  <div :id="container_id" style="height: 100%; width: 100%;"></div>
                </div>
              </div>

              
              <div v-if="showOrderBookModal" 
                   id="orderBookModal" 
                   class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50"
                   @click="handleOrderBookModalClick">
                <div class="bg-[--color-bg--300] rounded-lg p-4 w-5/6 max-w-4xl" @click.stop>
                  <div class="flex justify-between items-center">
                    <h2 class="text-lg font-bold text-[--color-primary-silver]">Order Book for {{ currentTicker }}</h2>
                    <button @click="toggleOrderBookModal" class="bg-red-500 text-white px-4 py-2 rounded">Close</button>
                  </div>
                  
                  <!-- Search Section -->
                  <div class="mt-4 mb-4">
                    <div class="form-group relative">
                        <div class="flex-grow relative">
                            <input
                                v-model="orderBookSearchQuery"
                                @input="filterOrderBookCoins"
                                @focus="showOrderBookDropdown = true"
                                type="text"
                                class="form-control bg-[--color-bg--500] text-white p-2 rounded w-full text-sm"
                                placeholder="Search ticker..." />
                            
                            <!-- Dropdown for filtered results -->
                            <div v-if="showOrderBookDropdown && filteredOrderBookCoins.length > 0" 
                                 class="absolute z-50 w-full mt-1 bg-[--color-bg--300] rounded-lg shadow-lg max-h-48 overflow-y-auto">
                                <div v-for="ticker in filteredOrderBookCoins" 
                                     :key="ticker.symbol"
                                     @click="selectOrderBookCoin(ticker)"
                                     class="p-2 hover:bg-[--color-primary-purple] cursor-pointer text-sm">
                                    {{ ticker.pair }} ({{ formatTickerPrice(ticker) }})
                                </div>
                            </div>
                        </div>
                    </div>
                  </div>

                  <div class="mt-4">
                    <div class="flex flex-col lg:flex-row gap-4">
                      
                      <div class="cb pr-4 pb-0 flex-1 overflow-hidden">
                        <h3 class="text-glow font-bold text-lg">Order Book Sale</h3>
                        <div class="flex gap-2 items-center h-8 px-2">
                          <div class="flex flex-1 text-[--color-primary-green]">
                            <div class="w-1/3">Total</div>
                            <div class="w-1/3 text-center">Size</div>
                            <div class="w-1/3 text-end">Price</div>
                          </div>
                        </div>
                        <div class="relative overflow-y-scroll px-2 h-[150px]">
                          <div class="flex gap-2 flex-row">
                            <div class="flex-1">
                              <div v-for="order in asks" :key="order[0]" class="flex gap-2" :style="`background: linear-gradient(to right, #ff000030 0 ${(order[2] / maxAsk) * 100}%, #ffffff00 ${(order[2] / maxAsk) * 100}% 100%)`">
                                <div class="w-1/3 flex-1 text-left">{{ parseNumber((order[0] * order[1]), asset) }}</div>
                                <div class="w-1/3 flex-1 text-center text-[--color-primary-silver]">{{ parseFloat(order[1]).toFixed(4) }}</div>
                                <div class="w-1/3 flex-1 text-end text-[--color-primary-silver]">{{ parseFloat(order[0]).toFixed(2) }}</div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>

                      
                      <div class="cb pr-4 pb-0 flex-1 overflow-hidden">
                        <h3 class="text-glow font-bold text-lg">Order Book Buy</h3>
                        <div class="flex gap-2 items-center h-8 px-2">
                          <div class="flex flex-1 text-[--color-primary-green]">
                            <div class="w-1/3">Total</div>
                            <div class="w-1/3 text-center">Size</div>
                            <div class="w-1/3 text-end">Price</div>
                          </div>
                        </div>
                        <div class="relative overflow-y-scroll px-2 h-[150px]">
                          <div class="flex gap-2 flex-row">
                            <div class="flex-1">
                              <div v-for="order in bids" :key="order[0]" class="flex gap-2" :style="`background: linear-gradient(to left, #00ff0030 0 ${(order[2] / maxAsk) * 100}%, #ffffff00 ${(order[2] / maxAsk) * 100}% 100%)`">
                                <div class="w-1/3 flex-1 text-[--color-primary-silver]">{{parseNumber((order[0] * order[1]), asset)}}</div>
                                <div class="w-1/3 flex-1 text-center text-[--color-primary-silver]">{{parseFloat((order[1]))}}</div>
                                <div class="w-1/3 flex-1 text-end text-[--color-primary-green]">{{parseFloat(order[0])}}</div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </section>

          <!-- Settings Modal -->
          <div v-if="showSettings" id="staticModal" class="bg-[#00000080] fixed flex items-center justify-center top-0 left-0 right-0 z-50 w-full p-4 overflow-x-hidden overflow-y-auto md:inset-0 h-[calc(100%-1rem)] max-h-full">
            <!-- Modal content -->
            <div class="relative w-full max-w-2xl max-h-full">
              <div class="relative">
                <div class="flex">
                  <div class="cb-left mr-[1px]">
                    <div></div>
                  </div>
                  <div class="cb !bg-[--color-primary-black] px-6 py-2 w-full">
                    <p class="uppercase text-xl border-b-[1px] border-[#441618] pb-1 mb-2">Settings</p>
                    <p class="uppercase text-xl text-[--color-primary-blue]">Enable trading</p>
                    <p class="mb-2">Toggle ON or OFF the ability to trade on this terminal.</p>
                    <label class="relative inline-flex items-center cursor-pointer">
                      <input type="checkbox" value="" class="sr-only peer">
                      <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                      <span class="ml-3 text-sm font-medium text-gray-900 dark:text-gray-300">Enable trading</span>
                    </label>
                    <p class="uppercase text-xl text-[--color-primary-blue]">API KEY</p>
                    <p class="mb-2">Enter your API KEY from Exchange Test and allow IP address <span class="text-[--color-primary-yellow]">127.0.0.1</span>.</p>
                    <div class="cb w-96">
                      <input class="h-10 w-full px-4 bg-transparent focus:outline-none" placeholder="Do not enter any live API KEY!">
                    </div>
                  </div>
                </div>
                
                <div class="mt-10 flex gap-1 justify-center">
                  <div class="cb-style3">
                    <div data-modal-hide="staticModal" type="button" class="relative flex gap-2 items-center justify-center">
                      <span class="bg-[--color-primary-blue] rounded-full w-5 h-5 block border-1 border-[--color-primary-black]">
                        <svg class="scale-75 fill-[--color-primary-black]" clip-rule="evenodd" fill-rule="evenodd" stroke-linejoin="round" stroke-miterlimit="2" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path d="m9.831 16.198.002-.003-1.113-.996-.004.004-2.468-2.202c-.144-.128-.322-.191-.5-.191-.417 0-.749.337-.749.75 0 .206.084.412.249.56l2.478 2.21-.767.873-4.71-4.202c-.144-.128-.322-.191-.5-.191-.416 0-.749.337-.749.75 0 .206.084.412.25.56l5.268 4.7c.143.128.321.191.499.191.206 0 .41-.084.559-.25l1.264-1.437 1.677 1.496c.143.128.321.191.499.191.206 0 .409-.084.558-.25l11.234-12.499c.129-.143.192-.322.192-.501 0-.419-.338-.75-.748-.75-.206 0-.411.084-.559.249l-10.735 11.943zm-.451-1.75 1.114.996 8.316-9.182c.128-.143.191-.322.191-.501 0-.419-.337-.75-.748-.75-.206 0-.411.084-.559.249z" fill-rule="nonzero"/></svg>
                      </span>
                      <span class="font-semibold">Confirm</span>
                    </div>
                  </div>
                  <div @click="toggleSettings" class="cb-style3">
                    <div data-modal-hide="staticModal" type="button" class="relative flex gap-2 items-center justify-center">
                      <span class="bg-[--color-primary-blue] rounded-full w-5 h-5 block border-1 border-[--color-primary-black] flex items-center justify-center">
                        <svg class="fill-[--color-primary-black]" xmlns="http://www.w3.org/2000/svg" width="11" height="11" viewBox="0 0 24 24"><path d="M24 3.752l-4.423-3.752-7.771 9.039-7.647-9.008-4.159 4.278c2.285 2.885 5.284 5.903 8.362 8.708l-8.165 9.447 1.343 1.487c1.978-1.335 5.981-4.373 10.205-7.958 4.304 3.67 8.306 6.663 10.229 8.006l1.449-1.278-8.254-9.724c3.287-2.973 6.584-6.354 8.831-9.245z"/></svg>
                      </span>
                      <span class="font-semibold">Cancel</span>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <div v-if="showShareModal" 
               id="shareModal" 
               class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50"
               @click="handleShareModalClick">
            <div class="bg-[--color-bg--300] rounded-lg p-4 w-5/6 max-w-4xl" @click.stop>
                <div class="flex justify-between items-center">
                    <h2 class="text-lg font-bold text-[--color-primary-silver]">Share Tickers</h2>
                    <button @click="toggleShareModal" class="bg-red-500 text-white px-4 py-2 rounded">Close</button>
                </div>
                <div class="mt-4">
                    <div class="mb-4">
                        <ul class="flex gap-2 justify-between h-10 flex-wrap"> 
                            <li @click="shareFilterAsset('USDT')" 
                                :class="['cb2 flex flex-grow items-center justify-center cursor-pointer', 
                                        shareAssetFilter === 'USDT' ? 'active' : '']">USDT</li>
                            <li @click="shareFilterAsset('BTC')" 
                                :class="['cb2 flex flex-grow items-center justify-center cursor-pointer', 
                                        shareAssetFilter === 'BTC' ? 'active' : '']">BTC</li>
                            <li @click="shareFilterAsset('FAV')" 
                                :class="['cb2 flex flex-grow items-center justify-center cursor-pointer', 
                                        shareAssetFilter === 'FAV' ? 'active' : '']">
                                FAV
                                <span v-if="favorites.length > 0" class="text-[--color-primary-yellow]">★</span> 
                            </li>
                        </ul>
                    </div>
                    
                    <input v-model="tickerSearch" 
                           ref="tickerSearchInput"
                           placeholder="Search tickers..." 
                           class="w-full p-2 mb-4 border rounded bg-[--color-bg--500] text-white">
                    <div class="grid grid-cols-4 gap-2 max-h-[400px] overflow-y-auto overflow-x-hidden">
                        <div v-for="ticker in filteredShareTickers" 
                             :key="ticker.symbol" 
                             @click="toggleSelectedTicker(ticker.symbol)"
                             :class="[
                                 'p-2 rounded cursor-pointer transition-colors text-sm',
                                 selectedTickers.includes(ticker.symbol) 
                                     ? 'bg-[--color-primary-purple] text-white' 
                                     : 'bg-[--color-bg--500] hover:bg-[--color-primary-purple] hover:bg-opacity-50'
                             ]">
                            <div class="text-xs font-bold">{{ ticker.pair }}</div>
                            <div :class="[
                                ticker.style,
                                selectedTickers.includes(ticker.symbol) ? 'text-white' : ''
                            ]">
                                {{ formatTickerPrice(ticker) }}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="mt-4 flex justify-between items-center">
                    <div class="text-sm">
                        Selected: {{ selectedTickers.length }} tickers
                    </div>
                    <button @click="shareMultipleTickers" 
                            :disabled="!selectedTickers.length"
                            :class="[
                                'bg-[--color-primary-blue] text-white px-4 py-2 rounded',
                                !selectedTickers.length ? 'opacity-50 cursor-not-allowed' : ''
                            ]">
                        Share Selected
                    </button>
                </div>
            </div>
          </div>

          <!-- Calculator Modal -->
          <div v-if="showCalculator" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
            <div class="bg-[--color-bg--300] rounded-lg p-3 w-full max-w-sm mx-4" @click.stop>
                <div class="flex justify-between items-center mb-2 sticky top-0 bg-[--color-bg--300] z-10">
                    <h2 class="text-base font-bold text-[--color-primary-silver]">Calculator</h2>
                    <button @click="toggleCalculator" class="bg-red-500 text-white px-4 py-2 rounded">Close</button>
                </div>
                <div class="calculator-container">
                    <calculator-component 
                        :settings="calcSettings" 
                        :coins="coins" 
                        :tickers="tickers"
                        @update-settings="updateCalcSettings">
                    </calculator-component>
                </div>
            </div>
          </div>

          <!-- Portfolio Modal -->
          <div v-if="showPortfolio" class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 z-50">
            <div class="bg-[--color-bg--300] rounded-lg p-4 w-full max-w-2xl mx-4" @click.stop>
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-lg font-bold text-[--color-primary-silver]">Portfolio</h2>
                    <button @click="togglePortfolio" class="bg-red-500 text-white px-4 py-2 rounded">Close</button>
                </div>

                <!-- Add Position Form -->
                <div class="mb-6 bg-[--color-bg--500] p-4 rounded-lg">
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
                        <!-- Coin Selection -->
                        <div class="form-group relative">
                            <input
                                v-model="portfolioForm.searchQuery"
                                @input="filterPortfolioCoins"
                                @focus="showPortfolioDropdown = true"
                                type="text"
                                class="form-control bg-[--color-bg--300] text-white p-2 rounded w-full text-sm"
                                placeholder="Search coin..." />
                            
                            <!-- Dropdown for filtered results -->
                            <div v-if="showPortfolioDropdown && filteredPortfolioCoins.length > 0" 
                                 class="absolute z-50 w-full mt-1 bg-[--color-bg--300] rounded-lg shadow-lg max-h-48 overflow-y-auto">
                                <div v-for="ticker in filteredPortfolioCoins" 
                                     :key="ticker.symbol"
                                     @click="selectPortfolioCoin(ticker)"
                                     class="p-2 hover:bg-[--color-primary-purple] cursor-pointer text-sm">
                                    {{ ticker.pair }} ({{ formatTickerPrice(ticker) }})
                                </div>
                            </div>
                        </div>

                        <!-- Amount -->
                        <div class="form-group">
                            <input 
                                v-model="portfolioForm.amount"
                                type="number"
                                min="0"
                                step="0.00000001"
                                class="form-control bg-[--color-bg--300] text-white p-2 rounded w-full text-sm"
                                placeholder="Amount of coins" />
                        </div>

                        <!-- Buy Price -->
                        <div class="form-group">
                            <input 
                                v-model="portfolioForm.buyPrice"
                                type="number"
                                min="0"
                                step="0.00000001"
                                class="form-control bg-[--color-bg--300] text-white p-2 rounded w-full text-sm"
                                placeholder="Buy price per coin" />
                        </div>

                        <!-- Add Button -->
                        <div class="form-group flex items-end">
                            <button @click="addPortfolioPosition" 
                                    :disabled="!portfolioForm.selectedCoin || !portfolioForm.amount || !portfolioForm.buyPrice"
                                    :class="[
                                        'text-white px-4 py-2 rounded text-sm w-full',
                                        (!portfolioForm.selectedCoin || !portfolioForm.amount || !portfolioForm.buyPrice)
                                            ? 'bg-gray-500 cursor-not-allowed'
                                            : 'bg-[--color-primary-blue] hover:bg-[--color-primary-purple]'
                                    ]">
                                Add Position
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Portfolio Positions -->
                <div class="bg-[--color-bg--500] rounded-lg p-4">
                    <div class="grid grid-cols-1 gap-3">
                        <div v-for="(position, index) in portfolioPositions" 
                             :key="index"
                             class="bg-[--color-bg--300] p-3 rounded-lg">
                            <div class="flex justify-between items-center">
                                <div class="flex-1">
                                    <div class="font-bold">{{ position.pair }}</div>
                                    <div class="text-sm">
                                        Amount: {{ position.amount }} coins
                                        <span class="mx-2">|</span>
                                        Buy Price: ${{ position.buyPrice }}
                                    </div>
                                </div>
                                <div class="text-right">
                                    <div :class="position.profit >= 0 ? 'text-[--color-primary-green]' : 'text-[--color-primary--500]'" class="font-bold">
                                        {{ position.profit >= 0 ? '+' : '' }}${{ position.profit.toFixed(2) }}
                                    </div>
                                    <div :class="position.profitPercent >= 0 ? 'text-[--color-primary-green]' : 'text-[--color-primary--500]'" class="text-sm">
                                        {{ position.profitPercent >= 0 ? '+' : '' }}{{ position.profitPercent.toFixed(2) }}%
                                    </div>
                                </div>
                                <button @click="removePosition(index)" class="ml-4 text-red-500 hover:text-red-700">
                                    ✕
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Total Summary -->
                    <div class="mt-6 bg-[--color-primary-purple] p-4 rounded-lg">
                        <div class="grid grid-cols-2 gap-4">
                            <div>
                                <div class="text-sm text-white">Total Investment:</div>
                                <div class="text-lg font-bold text-white">${{ totalInvestment.toFixed(2) }}</div>
                            </div>
                            <div>
                                <div class="text-sm text-white">Current Value:</div>
                                <div class="text-lg font-bold" 
                                     :class="totalProfit >= 0 ? 'text-[--color-primary-green]' : 'text-[--color-primary--500]'">
                                    ${{ currentValue.toFixed(2) }}
                                    <span class="text-sm ml-2">
                                        ({{ totalProfit >= 0 ? '+' : '' }}{{ totalProfitPercent.toFixed(2) }}%)
                                    </span>
                                </div>
                            </div>
                        </div>
                        <div class="mt-4 text-center">
                            <div class="text-sm text-white">Total Profit/Loss:</div>
                            <div class="text-xl font-bold" 
                                 :class="totalProfit >= 0 ? 'text-[--color-primary-green]' : 'text-[--color-primary--500]'">
                                {{ totalProfit >= 0 ? '+' : '' }}${{ totalProfit.toFixed(2) }}
                            </div>
                        </div>
                    </div>
                </div>
            </div>
          </div>
        </div>
    </div>
<script>
    const { createApp } = Vue
    
    // Calculator component
    const CalculatorComponent = {
        props: ['settings', 'coins', 'tickers'],
        template: `
        <div class="calculator-wrapper">
            <!-- Input Section -->
            <div class="input-section bg-[--color-bg--500] rounded-lg p-2">
                <div class="grid grid-cols-1 gap-2">
                    <!-- Coin Selection -->
                    <div class="form-group relative">
                        <label class="block text-xs text-[--color-primary-silver]">Select Coin</label>
                        <input
                            v-model="searchQuery"
                            @input="filterCoins"
                            @focus="showDropdown = true"
                            type="text"
                            class="form-control bg-[--color-bg--300] text-white p-1.5 rounded w-full text-sm"
                            placeholder="Search coin..." />
                        
                        <!-- Dropdown for filtered results -->
                        <div v-if="showDropdown && filteredCoins.length > 0" 
                             class="absolute z-50 w-full mt-1 bg-[--color-bg--300] rounded-lg shadow-lg max-h-48 overflow-y-auto">
                            <div v-for="ticker in filteredCoins" 
                                 :key="ticker.symbol"
                                 @click="selectCoin(ticker)"
                                 class="p-2 hover:bg-[--color-primary-purple] cursor-pointer text-sm">
                                {{ ticker.pair }} ({{ formatPrice(ticker.close) }})
                            </div>
                        </div>
                    </div>

                    <!-- Initial Investment -->
                    <div class="form-group">
                        <label class="block text-xs text-[--color-primary-silver]">Initial Investment ($)</label>
                        <input 
                            v-model="settings.investment"
                            @change="saveChanges()"
                            type="number"
                            min="0"
                            inputmode="decimal"
                            class="form-control bg-[--color-bg--300] text-white p-1.5 rounded w-full text-sm"
                            placeholder="---" />
                    </div>

                    <!-- Initial Coin Price -->
                    <div class="form-group">
                        <label class="block text-xs text-[--color-primary-silver]">Initial Coin Price</label>
                        <input
                            v-model="settings.initialPrice"
                            @change="saveChanges()"
                            type="number"
                            min="0"
                            inputmode="decimal"
                            class="form-control bg-[--color-bg--300] text-white p-1.5 rounded w-full text-sm"
                            placeholder="---" />
                    </div>

                    <!-- Projected Coin Price -->
                    <div class="form-group">
                        <label class="block text-xs text-[--color-primary-silver]">Target Coin Price</label>
                        <input
                            v-model="settings.projectedPrice"
                            @change="saveChanges()"
                            type="number"
                            min="0"
                            inputmode="decimal"
                            class="form-control bg-[--color-bg--300] text-white p-1.5 rounded w-full text-sm"
                            placeholder="---" />
                    </div>

                    <!-- Service Fee -->
                    <div class="form-group">
                        <label class="block text-xs text-[--color-primary-silver]">Fee (%)</label>
                        <input
                            v-model="settings.serviceFee"
                            @change="saveChanges()"
                            type="number"
                            min="0"
                            max="100"
                            step="0.1"
                            class="form-control bg-[--color-bg--300] text-white p-1.5 rounded w-full text-sm"
                            placeholder="---" />
                    </div>

                    <!-- Tax Rate -->
                    <div class="form-group">
                        <label class="block text-xs text-[--color-primary-silver]">Tax (%)</label>
                        <input
                            v-model="settings.taxRate"
                            @change="saveChanges()"
                            type="number"
                            min="0"
                            max="100"
                            step="0.1"
                            class="form-control bg-[--color-bg--300] text-white p-1.5 rounded w-full text-sm"
                            placeholder="---" />
                    </div>
                </div>
            </div>

            <!-- Results Section -->
            <div v-if="hasValidInputs" class="results-section bg-[--color-bg--500] rounded-lg p-2 mt-2">
                <div class="grid grid-cols-1 gap-2">
                    <div class="result-item p-2 bg-[--color-bg--300] rounded">
                        <div class="text-xs text-[--color-primary-silver]">Coins:</div>
                        <div class="text-sm font-bold text-white">{{ totalCoins.toFixed(8) }}</div>
                    </div>

                    <div class="result-item p-2 bg-[--color-bg--300] rounded">
                        <div class="text-xs text-[--color-primary-silver]">Fee:</div>
                        <div class="text-sm font-bold text-[--color-primary--500]">{{ fees | currency }}</div>
                    </div>

                    <div class="result-item p-2 bg-[--color-bg--300] rounded">
                        <div class="text-xs text-[--color-primary-silver]">Tax:</div>
                        <div class="text-sm font-bold text-[--color-primary-yellow]">{{ taxes | currency }}</div>
                    </div>

                    <div class="result-item p-2 bg-[--color-primary-purple] rounded">
                        <div class="text-xs text-white">Result:</div>
                        <div class="text-base font-bold" :class="projectedTotal >= 0 ? 'text-[--color-primary-green]' : 'text-[--color-primary--500]'">
                            {{ projectedTotal >= 0 ? '+' : '' }}{{ projectedTotal | currency }}
                        </div>
                    </div>
                </div>
            </div>
        </div>`,
        data() {
            return {
                searchQuery: '',
                showDropdown: false,
                selectedCoin: ''
            };
        },
        computed: {
            filteredCoins() {
                if (!this.tickers || !this.searchQuery) return [];
                const query = this.searchQuery.toLowerCase();
                return Object.values(this.tickers)
                    .filter(ticker => {
                        const symbol = ticker.symbol.toLowerCase();
                        const pair = ticker.pair.toLowerCase();
                        return (symbol.includes(query) || pair.includes(query)) && 
                               ticker.symbol.endsWith('USDT');
                    })
                    .slice(0, 5) // Limit to top 5 results
                    .sort((a, b) => {
                        // Exact matches first
                        const aExact = a.symbol.toLowerCase().startsWith(query);
                        const bExact = b.symbol.toLowerCase().startsWith(query);
                        if (aExact && !bExact) return -1;
                        if (!aExact && bExact) return 1;
                        return a.pair.localeCompare(b.pair);
                    });
            },
            hasValidInputs() {
                return this.settings.investment > 0 && 
                       this.settings.initialPrice > 0 && 
                       this.settings.projectedPrice > 0;
            },
            totalCoins() {
                return this.settings.investment / this.settings.initialPrice;
            },
            projectedSubTotal() {
                return (this.settings.projectedPrice * this.totalCoins);
            },
            projectedProfit() {
                return (this.projectedSubTotal - this.settings.investment);
            },
            fees() {
                return this.settings.investment * (this.settings.serviceFee / 100);
            },
            taxes() {
                return (this.projectedProfit - this.fees) * (this.settings.taxRate / 100);
            },
            projectedTotal() {
                return this.projectedProfit - this.fees - this.taxes;
            }
        },
        methods: {
            filterCoins() {
                this.showDropdown = true;
            },
            selectCoin(ticker) {
                this.searchQuery = ticker.pair;
                this.selectedCoin = ticker.symbol;
                this.showDropdown = false;
                this.updateCoinPrice();
            },
            formatPrice(price) {
                return new Intl.NumberFormat('en-US', {
                    style: 'currency',
                    currency: 'USD',
                    minimumFractionDigits: 2,
                    maximumFractionDigits: 2
                }).format(price);
            },
            updateCoinPrice() {
                if (this.selectedCoin && this.tickers[this.selectedCoin]) {
                    this.settings.initialPrice = parseFloat(this.tickers[this.selectedCoin].close);
                    this.settings.projectedPrice = parseFloat(this.tickers[this.selectedCoin].close);
                    this.saveChanges();
                }
            },
            saveChanges() {
                this.$emit('update-settings', this.settings);
            }
        },
        mounted() {
            // Close dropdown when clicking outside
            document.addEventListener('click', (e) => {
                if (!e.target.closest('.form-group')) {
                    this.showDropdown = false;
                }
            });
        },
        beforeUnmount() {
            document.removeEventListener('click', () => {});
        }
    };
    
    createApp({
        components: {
            'calculator-component': CalculatorComponent
        },
        data() {
            return {
                sock: null,
                status: 0,
                tickers: {},
                cache: [],
                trades: [],
                favorites: JSON.parse(localStorage.getItem('favorites')) || ['BTCUSDT'],
                interval: '1d',
                digitalClock: null,
                asks: [],
                bids: [],
                maxAsk: 0,
                bgImageUrl: null,
                showSettings: false,
                showLatestTrades: true,
                inputSearch: '',
                asset: 'USDT', 
                sort: 'assetVolume',
                order: 'desc',
                ticker: 'BTCUSDT',
                container_id: 'vue-trading-view',
                change: 'change',
                options: {
                    autosize: true,
                    symbol: 'BINANCE:BTCUSDT',
                    interval: '30',
                    timezone: 'Europe/Moscow',
                    theme: 'dark',
                    style: '1',
                    locale: 'en',
                    toolbar_bg: '#f1f3f6',
                    enable_publishing: false,
                    withdateranges: true,
                    hide_side_toolbar: false,
                    allow_symbol_change: true,
                    save_image: true,
                    details: false,
                    hotlist: false,
                    studies: [
                        {
                            id: 'VWAP@tv-basicstudies',
                        },
                        {
                            id: 'MAExp@tv-basicstudies',
                            inputs: {
                                length: 200
                            },
                            styles: {}
                        }
                    ],
                },
                showOrderBookModal: false, 
                currentTicker: '', 
                showShareModal: false,
                selectedTickers: [],
                tickerSearch: '',
                shareAssetFilter: 'USDT',
                tonPrice: null,
                tonUpdateInterval: null,
                showCalculator: false,
                calcSettings: {
                    investment: null,
                    initialPrice: null,
                    projectedPrice: null,
                    serviceFee: null,
                    taxRate: null
                },
                coins: null,
                orderBookSearchQuery: '',
                showOrderBookDropdown: false,
                filteredOrderBookCoins: [],
                showPortfolio: false,
                portfolioForm: {
                    searchQuery: '',
                    selectedCoin: null,
                    amount: '',
                    buyPrice: ''
                },
                portfolioPositions: [],
                showPortfolioDropdown: false,
                filteredPortfolioCoins: [],
                totalInvestment: 0,
                currentValue: 0,
                totalProfit: 0,
                totalProfitPercent: 0
            }
        },
        methods: {
            toggleSettings() {
                this.showSettings = !this.showSettings;
            },
            toggleLatestTrades() {
                this.showLatestTrades = !this.showLatestTrades;
            },
            startClock() {
                this.digitalClock = new Date().toLocaleTimeString();
                setTimeout(() => { this.startClock() }, 1000);
            },
            sockInit() {
                this.sock = new WebSocket('wss://stream.binance.com:9443/ws');
                this.sock.onopen = this.sockOpen;
                this.sock.onmessage = this.sockMessage;
                this.sock.onclose = this.sockClose;
                this.sock.onerror = this.sockError;
                this.updateTonPrice();
                this.tonUpdateInterval = setInterval(() => this.updateTonPrice(), 30000);
            },
            sockOpen() {
                this.status = 1;
                this.sock.send(JSON.stringify({
                    "method": "SUBSCRIBE",
                    "params": [
                        "!ticker@arr"
                    ],
                    "id": 1
                }));
            },
            sockMessage(e) {
                let data = JSON.parse(e.data);
                if (Array.isArray(data)) {
                    data.forEach(ticker => {
                        
                        if (ticker.s.endsWith('BTC')) {
                            this.tickers[ticker.s] = {
                                symbol: ticker.s,
                                pair: ticker.s.replace('BTC', '') + '/BTC',
                                token: ticker.s.replace('BTC', ''),
                                asset: 'BTC',
                                close: parseFloat(ticker.c).toFixed(8),
                                open: parseFloat(ticker.o).toFixed(8),
                                high: parseFloat(ticker.h).toFixed(8),
                                low: parseFloat(ticker.l).toFixed(8),
                                volume: parseFloat(ticker.v).toFixed(8),
                                quoteVolume: parseFloat(ticker.q).toFixed(8),
                                tokenVolume: parseFloat(ticker.v).toFixed(2),
                                assetVolume: parseFloat(ticker.q).toFixed(2),
                                percent: parseFloat(ticker.P),
                                arrow: parseFloat(ticker.P) >= 0 ? '↑' : '↓',
                                style: parseFloat(ticker.P) >= 0 ? 'text-[--color-primary-green]' : 'text-[--color-primary--500]'
                            }
                        }
                        if (ticker.s.endsWith('USDT')) {
                            this.tickers[ticker.s] = {
                                symbol: ticker.s,
                                pair: ticker.s.replace('USDT', '') + '/USDT',
                                token: ticker.s.replace('USDT', ''),
                                asset: 'USDT',
                                close: parseFloat(ticker.c).toFixed(8),
                                open: parseFloat(ticker.o).toFixed(8),
                                high: parseFloat(ticker.h).toFixed(8),
                                low: parseFloat(ticker.l).toFixed(8),
                                volume: parseFloat(ticker.v).toFixed(8),
                                quoteVolume: parseFloat(ticker.q).toFixed(8),
                                tokenVolume: parseFloat(ticker.v).toFixed(2),
                                assetVolume: parseFloat(ticker.q).toFixed(2),
                                percent: parseFloat(ticker.P),
                                arrow: parseFloat(ticker.P) >= 0 ? '↑' : '↓',
                                style: parseFloat(ticker.P) >= 0 ? 'text-[--color-primary-green]' : 'text-[--color-primary--500]'
                            }
                        }
                    });
                    this.status = 2;
                }
            },
            sockClose() {
                this.status = 0;
                console.log('socket closed');
            },
            sockError(e) {
                this.status = 0;
                console.log('socket error:', e);
            },
            changeTicker(symbol) {
                this.ticker = symbol;
                this.currentTicker = symbol;
                this.options.symbol = 'BINANCE:' + symbol;
                if (window.tvWidget) {
                    window.tvWidget.setSymbol('BINANCE:' + symbol);
                }
            },
            setFavorite(symbol) {
                if (this.favorites.includes(symbol)) {
                    this.favorites = this.favorites.filter(item => item !== symbol);
                } else {
                    this.favorites.push(symbol);
                }
                localStorage.setItem('favorites', JSON.stringify(this.favorites));
            },
            filterAsset(asset) {
                this.asset = asset; 
                this.status = 1; 
                
            },
            sortBy(field, order) {
                this.sort = field;
                this.order = order;
            },
            parseNumber(number, asset) {
                if (asset === 'USDT') {
                    return new Intl.NumberFormat('en-US', {
                        style: 'currency',
                        currency: 'USD',
                        minimumFractionDigits: 2,
                        maximumFractionDigits: 2
                    }).format(number);
                }
                return parseFloat(number).toFixed(8);
            },
            timestampToDate(timestamp) {
                return new Date(timestamp).toLocaleTimeString("en-GB");
            },
            appendScript(onload) {
                const script = document.createElement('script');
                script.src = 'https://s3.tradingview.com/tv.js';
                script.async = true;
                script.onload = onload;
                document.head.appendChild(script);
            },
            initWidget() {
                const widget = new TradingView.widget({
                    container_id: this.container_id,
                    width: '100%', 
                    height: '500px', 
                    ...this.options
                });
                window.tvWidget = widget;
            },
            async prepareOrderBook() {
                await fetch('https://api.binance.com/api/v3/depth?symbol=' + this.ticker + '&limit=100')
                .then(response => response.json())
                .then(data => {
                    console.log('Order Book Data:', data);
                    this.asks = data.asks;
                    this.bids = data.bids;

                    for (let i = 0; i < this.asks.length; i++) {
                        var arr = this.asks.map(x => {
                            return Number(x[1]);
                        });
                        this.asks[i].push(arr.slice(0, i + 1).reduce((a, b) => a + b));
                    }
                    for (let i = 0; i < this.bids.length; i++) {
                        var arr = this.bids.map(x => {
                            return Number(x[1]);
                        });
                        this.bids[i].push(arr.slice(0, i + 1).reduce((a, b) => a + b));
                    }
                });

                this.maxAsk = Math.max(...this.asks.map(x => { return x[2] }));
                setTimeout(async () => { await this.prepareOrderBook() }, 500);
            },
            toggleOrderBookModal() {
                this.showOrderBookModal = !this.showOrderBookModal;
                if (this.showOrderBookModal) {
                    document.body.classList.add('no-scroll'); 
                } else {
                    document.body.classList.remove('no-scroll'); 
                }
            },
            closeKeyboard() {
                this.$refs.searchInput.blur(); 
            },
            handleKeyPress(event) {
                if (event.key === 'Enter') {
                    this.closeKeyboard(); 
                }
            },
            handleClick(event) {
                
                if (this.$refs.searchInput && !this.$refs.searchInput.contains(event.target)) {
                    this.closeKeyboard(); 
                }
            },
            toggleBodyScroll(disable) {
                if (disable && this.showShareModal) {
                    document.body.style.overflow = 'hidden';
                } else {
                    document.body.style.overflow = 'auto';
                }
            },
            openShareModal() {
                this.showShareModal = true;
                this.toggleBodyScroll(true);
            },
            toggleShareModal() {
                this.showShareModal = !this.showShareModal;
                this.toggleBodyScroll(this.showShareModal);
            },
            toggleSelectedTicker(symbol) {
                const index = this.selectedTickers.indexOf(symbol);
                if (index === -1) {
                    this.selectedTickers.push(symbol);
                    const element = event.currentTarget;
                    element.classList.add('selected-ticker');
                } else {
                    this.selectedTickers.splice(index, 1);
                    const element = event.currentTarget;
                    element.classList.remove('selected-ticker');
                }
            },
            formatTickerPrice(ticker) {
                if (ticker.symbol === 'BTCUSDT' || ticker.symbol === 'ETHUSDT' || ticker.symbol === 'BNBUSDT') {
                    return parseFloat(ticker.close).toFixed(2);
                }
                if (ticker.symbol.endsWith('BTC')) {
                    return ticker.close; 
                }
                if (ticker.symbol.endsWith('USDT')) {
                    return parseFloat(ticker.close).toFixed(4);
                }
                return ticker.close;
            },
            shareMultipleTickers() {
                if (!this.selectedTickers.length) return;
                
                const tickersInfo = this.selectedTickers.map(symbol => {
                    const ticker = this.tickers[symbol];
                    let formattedPrice;
                    
                    if (symbol === 'BTCUSDT' || symbol === 'ETHUSDT' || symbol === 'BNBUSDT') {
                        formattedPrice = parseFloat(ticker.close).toFixed(2);
                    } else if (symbol.endsWith('BTC')) {
                        formattedPrice = ticker.close; 
                    } else if (symbol.endsWith('USDT')) {
                        formattedPrice = parseFloat(ticker.close).toFixed(4);
                    }
                    
                    return `${ticker.pair}: ${formattedPrice}`;
                }).join('\n');
                
                const telegramMessage = `Prices:\n${tickersInfo}\n@BTCPunkTradebot`;
                const telegramUrl = `https://t.me/share/url?url=${encodeURIComponent(telegramMessage)}`;
                
                window.open(telegramUrl, '_blank');
                this.selectedTickers = [];
                this.toggleShareModal();
            },
            handleShareModalClick(event) {
              
                if (this.$refs.tickerSearchInput) {
                    this.$refs.tickerSearchInput.blur();
                }
            },
            shareFilterAsset(asset) {
                this.shareAssetFilter = asset;
            },
            async updateTonPrice() {
                try {
                    const response = await fetch('https://tonapi.io/v2/rates?tokens=ton&currencies=usd');
                    const data = await response.json();
                    const price = data.rates.TON.prices.USD;
                    const diff24h = data.rates.TON.diff_24h.USD.replace('%', '');
                    
                    this.tickers['TONUSDT'] = {
                        symbol: 'TONUSDT',
                        pair: 'TON/USDT',
                        token: 'TON',
                        asset: 'USDT',
                        close: price.toFixed(8),
                        open: price.toFixed(8), 
                        high: price.toFixed(8), 
                        low: price.toFixed(8),  
                        volume: '0',            
                        quoteVolume: '0',       
                        tokenVolume: '0',      
                        assetVolume: '0',     
                        percent: parseFloat(diff24h),
                        arrow: parseFloat(diff24h) >= 0 ? '↑' : '↓',
                        style: parseFloat(diff24h) >= 0 ? 'text-[--color-primary-green]' : 'text-[--color-primary--500]'
                    };
                } catch (error) {
                    console.error('Error fetching TON price:', error);
                }
            },
            toggleCalculator() {
                this.showCalculator = !this.showCalculator;
                if (this.showCalculator) {
                    document.body.style.overflow = 'hidden';
                } else {
                    document.body.style.overflow = 'auto';
                }
            },
            updateCalcSettings(settings) {
                this.calcSettings = { ...settings };
                localStorage.setItem('calcSettings', JSON.stringify(settings));
            },
            filterOrderBookCoins() {
                const query = this.orderBookSearchQuery.toLowerCase();
                this.filteredOrderBookCoins = Object.values(this.tickers)
                    .filter(ticker => {
                        const symbol = ticker.symbol.toLowerCase();
                        const pair = ticker.pair.toLowerCase();
                        return (symbol.includes(query) || pair.includes(query)) && 
                               ticker.symbol.endsWith('USDT');
                    })
                    .slice(0, 5)
                    .sort((a, b) => {
                        const aExact = a.symbol.toLowerCase().startsWith(query);
                        const bExact = b.symbol.toLowerCase().startsWith(query);
                        if (aExact && !bExact) return -1;
                        if (!aExact && bExact) return 1;
                        return a.pair.localeCompare(b.pair);
                    });
            },
            selectOrderBookCoin(ticker) {
                this.orderBookSearchQuery = ticker.pair;
                this.currentTicker = ticker.symbol;
                this.ticker = ticker.symbol;
                this.showOrderBookDropdown = false;
                // Сразу обновляем Order Book и график
                this.prepareOrderBook();
                if (window.tvWidget) {
                    window.tvWidget.setSymbol('BINANCE:' + this.currentTicker);
                }
            },
            handleOrderBookModalClick(event) {
                if (!event.target.closest('.form-group')) {
                    this.showOrderBookDropdown = false;
                }
            },
            togglePortfolio() {
                this.showPortfolio = !this.showPortfolio;
                if (this.showPortfolio) {
                    document.body.style.overflow = 'hidden';
                } else {
                    document.body.style.overflow = 'auto';
                }
            },
            selectPortfolioCoin(ticker) {
                this.portfolioForm.searchQuery = ticker.pair;
                this.portfolioForm.selectedCoin = ticker;
                this.showPortfolioDropdown = false;
            },
            addPortfolioPosition() {
                if (!this.portfolioForm.selectedCoin || !this.portfolioForm.amount || !this.portfolioForm.buyPrice) {
                    return;
                }

                const position = {
                    symbol: this.portfolioForm.selectedCoin.symbol,
                    pair: this.portfolioForm.selectedCoin.pair,
                    token: this.portfolioForm.selectedCoin.token,
                    asset: this.portfolioForm.selectedCoin.asset,
                    amount: parseFloat(this.portfolioForm.amount),
                    buyPrice: parseFloat(this.portfolioForm.buyPrice),
                    investment: parseFloat(this.portfolioForm.amount) * parseFloat(this.portfolioForm.buyPrice)
                };

                this.portfolioPositions.push(position);
                this.updatePortfolioTotals();
                this.savePortfolio();

                // Reset form
                this.portfolioForm.searchQuery = '';
                this.portfolioForm.selectedCoin = null;
                this.portfolioForm.amount = '';
                this.portfolioForm.buyPrice = '';
            },
            filterPortfolioCoins() {
                if (!this.portfolioForm.searchQuery) {
                    this.showPortfolioDropdown = false;
                    return;
                }

                const query = this.portfolioForm.searchQuery.toLowerCase();
                this.filteredPortfolioCoins = Object.values(this.tickers)
                    .filter(ticker => {
                        const symbol = ticker.symbol.toLowerCase();
                        const pair = ticker.pair.toLowerCase();
                        return (symbol.includes(query) || pair.includes(query)) && 
                               ticker.symbol.endsWith('USDT');
                    })
                    .slice(0, 5)
                    .sort((a, b) => {
                        const aExact = a.symbol.toLowerCase().startsWith(query);
                        const bExact = b.symbol.toLowerCase().startsWith(query);
                        if (aExact && !bExact) return -1;
                        if (!aExact && bExact) return 1;
                        return a.pair.localeCompare(b.pair);
                    });

                this.showPortfolioDropdown = this.filteredPortfolioCoins.length > 0;
            },
            removePosition(index) {
                this.portfolioPositions.splice(index, 1);
                this.updatePortfolioTotals();
                this.savePortfolio();
            },
            updatePortfolioTotals() {
                let totalInvestment = 0;
                let currentValue = 0;

                this.portfolioPositions.forEach((pos, index) => {
                    const investment = pos.amount * pos.buyPrice;
                    const ticker = this.tickers[pos.symbol];
                    const currentPrice = ticker ? parseFloat(ticker.close) : pos.buyPrice;
                    const positionCurrentValue = pos.amount * currentPrice;
                    const profit = positionCurrentValue - investment;
                    const profitPercent = (profit / investment) * 100;

                    // Обновляем позицию
                    this.$set(this.portfolioPositions, index, {
                        ...pos,
                        currentPrice,
                        currentValue: positionCurrentValue,
                        profit,
                        profitPercent
                    });

                    totalInvestment += investment;
                    currentValue += positionCurrentValue;
                });

                // Обновляем общие суммы
                this.totalInvestment = totalInvestment;
                this.currentValue = currentValue;
                this.totalProfit = currentValue - totalInvestment;
                this.totalProfitPercent = totalInvestment > 0 ? (this.totalProfit / totalInvestment) * 100 : 0;
            },
            savePortfolio() {
                const portfolioData = {
                    positions: this.portfolioPositions.map(pos => ({
                        symbol: pos.symbol,
                        pair: pos.pair,
                        token: pos.token,
                        asset: pos.asset,
                        amount: pos.amount,
                        buyPrice: pos.buyPrice,
                        investment: pos.amount * pos.buyPrice
                    }))
                };
                localStorage.setItem('portfolioData', JSON.stringify(portfolioData));
            },
            loadPortfolio() {
                const savedPortfolio = localStorage.getItem('portfolioData');
                if (savedPortfolio) {
                    try {
                        const data = JSON.parse(savedPortfolio);
                        if (data && data.positions) {
                            this.portfolioPositions = data.positions;
                            this.updatePortfolioTotals();
                        }
                    } catch (error) {
                        console.error('Error loading portfolio:', error);
                        this.portfolioPositions = [];
                    }
                }
            }
        },
        mounted() {
            // Инициализируем WebSocket и другие компоненты
            this.sockInit();
            this.startClock();
            this.appendScript(this.initWidget);
            this.prepareOrderBook();
            this.initWidget(); 
            this.favorites = JSON.parse(localStorage.getItem('favorites')) || ['BTCUSDT']; 
            
            // Загружаем сохраненные данные портфолио
            this.loadPortfolio();

            // Обновляем данные портфолио каждые 2 секунды
            setInterval(() => {
                if (this.portfolioPositions.length > 0) {
                    this.updatePortfolioTotals();
                }
            }, 2000);

            window.addEventListener('click', this.handleClick);

            // Загружаем сохраненные настройки калькулятора
            const savedSettings = localStorage.getItem('calcSettings');
            if (savedSettings) {
                this.calcSettings = JSON.parse(savedSettings);
            }
            
            // Get coins data
            axios.get('https://api.coinranking.com/v1/public/coins?base=USD&timePeriod=24h').then(response => {
                this.coins = response.data.data.coins;
            });
        },
        beforeUnmount() {
            this.sockClose();
            window.removeEventListener('click', this.handleClick);
            if (this.tonUpdateInterval) {
                clearInterval(this.tonUpdateInterval);
            }
        },
        computed: {
            statusMsg() {
                let msg = '';
                if (this.status == 0) {
                    msg = 'Connecting...';
                }
                if (this.status == 1) {
                    msg = 'Loading...';
                }
                if (this.status == 2) {
                    msg = 'Done';
                }
                return msg;
            },
            filterTickers() {
                let tickers = Object.values(this.tickers);
        
                
                if (this.asset === 'FAV') {
                    tickers = tickers.filter(ticker => this.favorites.includes(ticker.symbol));
                } else {
                    
                    tickers = tickers.filter(ticker => ticker.symbol.includes(this.asset));
                }
        
                
                if (this.inputSearch) {
                    tickers = tickers.filter(ticker => 
                        ticker.token.toLowerCase().includes(this.inputSearch.toLowerCase())
                    );
                }
        
                return tickers.sort((a, b) => {
                    if (this.order === 'desc') {
                        return b[this.sort] - a[this.sort];
                    }
                    return a[this.sort] - b[this.sort];
                });
            },
            latestTrades() {
                return this.showLatestTrades ? this.trades : [];
            },
            filteredShareTickers() {
                let tickers = Object.values(this.tickers);
                
                if (this.shareAssetFilter === 'FAV') {
                    tickers = tickers.filter(ticker => this.favorites.includes(ticker.symbol));
                } else {
                    tickers = tickers.filter(ticker => ticker.symbol.endsWith(this.shareAssetFilter));
                }
                
                if (this.tickerSearch) {
                    tickers = tickers.filter(ticker => 
                        ticker.pair.toLowerCase().includes(this.tickerSearch.toLowerCase())
                    );
                }
                
                return tickers;
            }
        }
    }).mount('#app')
</script>
<style>
    @import url('https://fonts.googleapis.com/css2?family=Rajdhani:wght@300;400;500;600;700&display=swap');
    @import url('https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@100;200;300;400;700&display=swap');

    :root {
        --ui-notch-amount: 0.5rem;
        --ui-notch-hypotenuse: 0.7071067811865476rem;
        --ui-notch-path: polygon(
            var(--ui-notch-amount) 0,
            calc(100% - var(--ui-notch-amount)) 0,
            100% var(--ui-notch-amount),
            100% calc(100% - var(--ui-notch-amount)),
            calc(100% - var(--ui-notch-amount)) 100%,
            var(--ui-notch-amount) 100%,
            0 calc(100% - var(--ui-notch-amount)),
            0 var(--ui-notch-amount)
        );
        --ui-notch-path-r: polygon(
            0 var(--ui-notch-amount),
            var(--ui-notch-amount) 0,
            calc(100% - var(--ui-notch-amount)) 0,
            100% var(--ui-notch-amount),
            100% calc(100% - var(--ui-notch-amount)),
            calc(100% - var(--ui-notch-amount)) 100%,
            var(--ui-notch-amount) 100%,
            0 calc(100% - var(--ui-notch-amount))
        );
        --ui-glow-text: 0 0 0.125em currentColor;
    }

    body {
        --color-bg--300: #1e181ef0; 
        --color-bg--500: #191a1e; 
        --color-primary--500: #e8615a; 
        --color-primary--600: #7A0B7A; 
        --color-primary-black: #0e0e18; 
        --color-primary-red: #710000; 
        --color-primary-yellow: #FDF500;
        --color-primary-green: #1AC5B0; 
        --color-primary-blue: #37EBF3; 
        --color-primary-purple: #7A0B7A;
        --color-primary-pink1: #E455AE; 
        --color-primary-pink2: #CB1DCD; 
        --color-primary-silver: #D1C5C0; 
        --color-secondary-blue: #37EBF360; 
    
        margin: 0; 
        min-height: 100vh; 
        background-color: var(--color-bg--500);
        color: var(--color-primary-silver); 
        font-family: 'Orbitron', sans-serif; 
    }

    .text-glow {
        text-shadow: var(--ui-glow-text);
    }

    .delimiter {
        height: 1px;
        background: var(--color-primary-purple); 
    }

    .delimiter2 {
        height: 1px;
        background: linear-gradient(90deg, transparent, var(--color-primary--600) 50%, transparent);
    }

    .status {
        width: 10px;
        height: 10px;
        border-radius: 50%;
    }

    .red {
        background-color: var(--color-primary--500);
        box-shadow: 0 0 10px var(--color-primary--500);
    }

    .green {
        background-color: var(--color-primary-green);
        box-shadow: 0 0 10px var(--color-primary-green);
    }

    .silver {
        color: var(--color-primary-silver);
    }

    .cb, .cb2 {
        position: relative;
        background-color: var(--color-bg--300);
        -webkit-clip-path: var(--ui-notch-path);
        clip-path: var(--ui-notch-path);
        padding-right: 0.5rem;
        border: 2px solid var(--color-primary-purple); 
        box-shadow: 0 0 10px 4px rgba(128, 0, 128, 0.9); 
    }

    .cb:hover, .cb2:hover {
       
    }

    .cb::before {
        background-color: var(--color-primary--600);
        bottom: 5px;
        content: "";
        display: block;
        height: 3px;
        position: absolute;
        right: -6px;
        top: auto;
        transform: rotate(-45deg);
        width: var(--ui-notch-hypotenuse);
        z-index: 100;
    }

    .cb-reverse {
        clip-path: var(--ui-notch-path-r);
    }

    .cb-reverse::before {
        transform: rotate(45deg);
        left: -6px;
    }

    .cb2::before {
        background-color: var(--color-primary--600);
        bottom: 5px;
        content: "";
        display: block;
        height: 3px;
        position: absolute;
        right: -6px;
        top: auto;
        transform: rotate(-45deg);
        width: var(--ui-notch-hypotenuse);
        z-index: 100;
    }

    .cb_tab {
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 20px;
        height: 50px; 
        min-width: 250px;
        text-transform: uppercase;
        letter-spacing: 0.035rem;
        text-shadow: var(--ui-glow-text);
        color: var(--color-primary--500);
        background-color: var(--color-primary--600);
        cursor: pointer;
        border: 0;
        outline: none;
        clip-path: polygon(
            4rem 0, 
            4.5rem 0.25rem, 
            100% 0.25rem, 
            100% calc(100% - var(--ui-notch-amount) + 2px),
            calc(100% - var(--ui-notch-amount) + 2px) 100%, 
            0 100%, 
            0 0
        );
    }

    .cb_tab:hover,
    .cb_tab.active {
        color: var(--color-primary-blue);
    }

    .cb_tab div {
        position: absolute;
        padding-top: 5px;
        top: 0.1rem;
        left: 0.1rem;
        right: 0.1rem;
        bottom: 0.1rem;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: var(--color-bg--300);
        clip-path: polygon(
            4rem 0, 
            4.5rem 0.25rem, 
            100% 0.25rem, 
            100% calc(100% - var(--ui-notch-amount) + 2px),
            calc(100% - var(--ui-notch-amount) + 2px) 100%, 
            0 100%, 
            0 0
        );
    }
    
    .cb {
        height: 100%; 
        width: 100%;  
    }

    .overflow-y-scroll::-webkit-scrollbar {
        background: transparent;
        width: 5px;
    }
     
    .overflow-y-scroll::-webkit-scrollbar-thumb {
        background-color: var(--color-primary--500);
    }
      
    .v-enter-active,
    .v-leave-active {
        opacity: 0;  
        transition: opacity 0.5s ease;
    }
    
    .v-enter-from,
    .v-leave-to {
        opacity: 0;
        transition: opacity 0.5s ease;
    }

    .dotdotdot {
        text-overflow: ellipsis;
        white-space: nowrap;
        overflow: hidden;
    }

    .tickers .header,
    .trades .header,
    .orders .header {
        color: var(--color-primary-blue);
    }

    .orders .header > div,
    .orders .body > div {
        flex: 1; 
    }

    .no-scroll {
        overflow: hidden; 
        height: 100%; 
    }

    .font-rajdhani {
        font-family: 'Rajdhani', sans-serif; 
    }

    select {
        color: black; 
    }

    .grid::-webkit-scrollbar {
        width: 6px;
    }

    .grid::-webkit-scrollbar-track {
        background: var(--color-bg--500);
    }

    .grid::-webkit-scrollbar-thumb {
        background: var(--color-primary-purple);
        border-radius: 3px;
    }

    .grid::-webkit-scrollbar-thumb:hover {
        background: var(--color-primary-blue);
    }

    #shareModal .grid {
        max-height: 60vh;
        overflow-y: auto;
        overflow-x: hidden;
        scrollbar-width: thin;
        -ms-overflow-style: none;
        padding-right: 10px;
    }

    #shareModal {
        position: fixed;
        inset: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 50;
    }

    #shareModal .bg-[--color-bg--300] {
        max-height: 90vh;
        overflow: hidden;
        width: 90%;
        max-width: 900px;
    }

    .selected-ticker {
        background-color: var(--color-primary-purple) !important;
        color: white !important;
        box-shadow: 0 0 10px var(--color-primary-purple);
    }

    .transition-colors {
        transition: all 0.3s ease;
    }

    .selected-ticker {
        animation: pulse 2s infinite;
    }

    @keyframes pulse {
        0% {
            box-shadow: 0 0 0 0 rgba(122, 11, 122, 0.7);
        }
        70% {
            box-shadow: 0 0 0 10px rgba(122, 11, 122, 0);
        }
        100% {
            box-shadow: 0 0 0 0 rgba(122, 11, 122, 0);
        }
    }

    .ticker-cell {
        min-width: 120px; 
        max-width: 200px; 
    }

    .cb2.active {
        background-color: var(--color-primary-purple);
        color: white;
    }
</style>
</body>
</html>
